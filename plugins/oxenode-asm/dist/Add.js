var t={d:(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{QV:()=>a,Gq:()=>o,cp:()=>u,gX:()=>s,If:()=>p});const e=window.OxenodeCore,n=window.jsxRuntimeExports;var o=!0,a="Add";function u(t){return function(t){if(null==t)throw new TypeError("Cannot destructure "+t)}(t),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{children:"Add"}),(0,n.jsx)("span",{children:"Add two values from .data"})]})}var p=[e.port.input().type("trigger"),e.port.input().type("number").label("a"),e.port.input().type("number").label("b"),e.port.output().type("trigger"),e.port.output().type("number").label("result")],s={x86_64:function(t){var r=t.$,e=t.inputs,n=e.a,o=e.b,a=t.outputs.result;return[r("mov","rax",[n]),r("add","rax",[o]),a?r("mov",[a],"rax"):"; unused result, can be found in `rax`"]}},d=r.QV,i=r.Gq,l=r.cp,c=r.gX,x=r.If;export{d as Name,i as Static,l as default,c as extern,x as ports};