var t={d:(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{QV:()=>a,mf:()=>l,cp:()=>f,If:()=>s});const e=window.OxenodeCore,n=window.jsxRuntimeExports;function o(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var n,o,u,i,a=[],l=!0,c=!1;try{if(u=(e=e.call(t)).next,0===r){if(Object(e)!==e)return;l=!1}else for(;!(l=(n=u.call(e)).done)&&(a.push(n.value),a.length!==r);l=!0);}catch(t){c=!0,o=t}finally{try{if(!l&&null!=e.return&&(i=e.return(),Object(i)!==i))return}finally{if(c)throw o}}return a}}(t,r)||function(t,r){if(!t)return;if("string"==typeof t)return u(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return u(t,r)}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function i(t,r,e,n,o,u,i){try{var a=t[u](i),l=a.value}catch(t){return void e(t)}a.done?r(l):Promise.resolve(l).then(n,o)}var a="Test Hook";function l(t){return c.apply(this,arguments)}function c(){var t;return t=function*(t){return t.controller.trigger(0)},c=function(){var r=this,e=arguments;return new Promise((function(n,o){var u=t.apply(r,e);function a(t){i(u,n,o,a,l,"next",t)}function l(t){i(u,n,o,a,l,"throw",t)}a(void 0)}))},c.apply(this,arguments)}function f(t){var r=t.nodeId,u=o((0,e.useNodeState)(r,"count",0),2),i=u[0],a=u[1];return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h4",{children:"State Counter Node"}),(0,n.jsx)("span",{className:"xsmall",children:"example"}),(0,n.jsxs)("p",{children:["Counter: ",i]}),(0,n.jsx)("button",{onClick:function(){return a(i+1)},children:"Click me!"})]})}var s=[e.port.input().type("trigger"),e.port.output().type("trigger"),e.port.output().type("number").label("count").onFetch((function(t){return t.state.count}))],p=r.QV,d=r.mf,y=r.cp,h=r.If;export{p as Name,d as Trigger,y as default,h as ports};