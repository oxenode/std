var r={d:(t,e)=>{for(var o in e)r.o(e,o)&&!r.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},o:(r,t)=>Object.prototype.hasOwnProperty.call(r,t)},t={};r.d(t,{QV:()=>p,cp:()=>n,gX:()=>u,If:()=>a});const e=window.OxenodeCore,o=window.jsxRuntimeExports;var p="Add";function n(r){return function(r){if(null==r)throw new TypeError("Cannot destructure "+r)}(r),(0,o.jsx)("h1",{children:"Add"})}var a=[e.port.input().type("trigger"),e.port.input().type("number").label("a"),e.port.input().type("number").label("b"),e.port.output().type("trigger"),e.port.output().type("number")],u={asm:function(r){var t=r.inputs,e=t.a,o=t.b;return[e?"push ".concat(e):"",o?"push ".concat(o):"","pop rbx","pop rax","add rax, rbx","push rax"]}},i=t.QV,s=t.cp,c=t.gX,d=t.If;export{i as Name,s as default,c as extern,d as ports};