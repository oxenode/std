var e={d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r)},r={};e.d(r,{QV:()=>o,cp:()=>a,gX:()=>p,If:()=>d});const t=window.OxenodeCore,n=window.jsxRuntimeExports;var o="dump";function a(e){return function(e){if(null==e)throw new TypeError("Cannot destructure "+e)}(e),(0,n.jsx)("h1",{children:"dump"})}var d=[t.port.input().type("trigger"),t.port.input().type("number").label("value"),t.port.output().type("trigger")],p={asm:function(e){var r,t=e.node,n=e.edges,o=t.ports.find((function(e){return"value"===e.label}));if(o.edgeIds[0]){var a=n[o.edgeIds[0]].from,d=a.portId,p=a.nodeId;r="".concat(p,"_").concat(d)}var u=o.edgeIds.length>0?"[".concat(r,"]"):"0";return["mov rdi, ".concat(u),"call dump"]}},u=r.QV,c=r.cp,i=r.gX,s=r.If;export{u as Name,c as default,i as extern,s as ports};