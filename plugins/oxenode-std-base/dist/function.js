var t={d:(r,e)=>{for(var n in e)t.o(e,n)&&!t.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:e[n]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r)},r={};t.d(r,{VG:()=>l,ZP:()=>s,Tt:()=>d});const e=window.OxenodeCore,n=window.OxenodeUi,o=window.jsxRuntimeExports;function a(t,r,e,n,o,a,u){try{var i=t[a](u),c=i.value}catch(t){return void e(t)}i.done?r(c):Promise.resolve(c).then(n,o)}function u(t){return function(){var r=this,e=arguments;return new Promise((function(n,o){var u=t.apply(r,e);function i(t){a(u,n,o,i,c,"next",t)}function c(t){a(u,n,o,i,c,"throw",t)}i(void 0)}))}}function i(t,r){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var n,o,a,u,i=[],c=!0,l=!1;try{if(a=(e=e.call(t)).next,0===r){if(Object(e)!==e)return;c=!1}else for(;!(c=(n=a.call(e)).done)&&(i.push(n.value),i.length!==r);c=!0);}catch(t){l=!0,o=t}finally{try{if(!c&&null!=e.return&&(u=e.return(),Object(u)!==u))return}finally{if(l)throw o}}return i}}(t,r)||function(t,r){if(!t)return;if("string"==typeof t)return c(t,r);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return c(t,r)}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function c(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}var l="Function JS";function s(t){var r=t.nodeId,a=i((0,e.useNodeState)(r,"code","return 'Hello';"),2),u=a[0],c=a[1];return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("h3",{children:"JS Function"}),(0,o.jsx)(n.Textarea,{value:u,onChange:function(t){return c(t.target.value)},language:"javascript"}),(0,o.jsx)("br",{}),(0,o.jsx)(n.ErrorMessage,{nodeId:r})]})}var f=Object.getPrototypeOf(u((function*(){}))).constructor,d=[e.port.input().type("data").label("args"),e.port.output().type("function").label("function").onFetch((function(t){var r,e=t.node,n=t.state.code,o=t.inputs.args,a=t.controller;o=o||{},e.State.err=void 0;try{var u="const {".concat(Object.keys(o).join(","),"} = args;\n");r=f("args",u+n)}catch(t){return e.State.err=t.toString(),a.update(e),function(){}}return a.update(e),r}))],p=r.VG,y=r.ZP,v=r.Tt;export{p as Name,y as default,v as ports};